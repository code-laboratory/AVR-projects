
AVRASM ver. 2.1.30  C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\5\Debug\List\5.asm Wed May 24 21:22:36 2023

C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\5\Debug\List\5.asm(1087): warning: Register r5 already defined by the .DEF directive
C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\5\Debug\List\5.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\5\Debug\List\5.asm(1089): warning: Register r7 already defined by the .DEF directive
C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\5\Debug\List\5.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\5\Debug\List\5.asm(1091): warning: Register r9 already defined by the .DEF directive
C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\5\Debug\List\5.asm(1092): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _min=R5
                 	.DEF _sec=R4
                 	.DEF _mode=R7
                 	.DEF __lcd_x=R6
                 	.DEF __lcd_y=R9
                 	.DEF __lcd_maxx=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0041 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 011e
000034 0000      	.DB  0x1E,0x1,0x0,0x0
                 
                 _0x0:
000035 3225
000036 3a64
000037 3225
000038 0064      	.DB  0x25,0x32,0x64,0x3A,0x25,0x32,0x64,0x0
                 _0x2020003:
000039 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
00003a 0004      	.DW  0x04
00003b 0004      	.DW  0x04
00003c 0066      	.DW  __REG_VARS*2
                 
00003d 0002      	.DW  0x02
00003e 026a      	.DW  __base_y_G101
00003f 0072      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
000040 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000041 94f8      	CLI
000042 27ee      	CLR  R30
000043 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000044 e0f1      	LDI  R31,1
000045 bff5      	OUT  MCUCR,R31
000046 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000047 e08d      	LDI  R24,(14-2)+1
000048 e0a2      	LDI  R26,2
000049 27bb      	CLR  R27
                 __CLEAR_REG:
00004a 93ed      	ST   X+,R30
00004b 958a      	DEC  R24
00004c f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004d e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004e e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004f e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000050 93ed      	ST   X+,R30
000051 9701      	SBIW R24,1
000052 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000053 e7e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000054 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000055 9185      	LPM  R24,Z+
000056 9195      	LPM  R25,Z+
000057 9700      	SBIW R24,0
000058 f061      	BREQ __GLOBAL_INI_END
000059 91a5      	LPM  R26,Z+
00005a 91b5      	LPM  R27,Z+
00005b 9005      	LPM  R0,Z+
00005c 9015      	LPM  R1,Z+
00005d 01bf      	MOVW R22,R30
00005e 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005f 9005      	LPM  R0,Z+
000060 920d      	ST   X+,R0
000061 9701      	SBIW R24,1
000062 f7e1      	BRNE __GLOBAL_INI_LOOP
000063 01fb      	MOVW R30,R22
000064 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000065 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000066 bfed      	OUT  SPL,R30
000067 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000068 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000069 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006a e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006b 940c 0082 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;
                 ;unsigned char min = 1;
                 ;unsigned char sec = 30;
                 ;unsigned char mode = 0;
                 ;char output[10];
                 ;
                 ;void decrement_time(void)
                 ; 0000 000C {
                 
                 	.CSEG
                 _decrement_time:
                 ; .FSTART _decrement_time
                 ; 0000 000D     if (sec == 0) {
00006d 2044      	TST  R4
00006e f439      	BRNE _0x3
                 ; 0000 000E         if (min > 0) {
00006f e0e0      	LDI  R30,LOW(0)
000070 15e5      	CP   R30,R5
000071 f418      	BRSH _0x4
                 ; 0000 000F             sec = 59;
000072 e3eb      	LDI  R30,LOW(59)
000073 2e4e      	MOV  R4,R30
                 ; 0000 0010             min--;
000074 945a      	DEC  R5
                 ; 0000 0011         }
                 ; 0000 0012     } else {
                 _0x4:
000075 c001      	RJMP _0x5
                 _0x3:
                 ; 0000 0013         sec--;
000076 944a      	DEC  R4
                 ; 0000 0014     }
                 _0x5:
                 ; 0000 0015 }
000077 9508      	RET
                 ; .FEND
                 ;
                 ;void increment_time(void)
                 ; 0000 0018 {
                 _increment_time:
                 ; .FSTART _increment_time
                 ; 0000 0019     if (sec == 59) {
000078 e3eb      	LDI  R30,LOW(59)
000079 15e4      	CP   R30,R4
00007a f429      	BRNE _0x6
                 ; 0000 001A         sec = 0;
00007b 2444      	CLR  R4
                 ; 0000 001B         if (min < 59) min++;
00007c 165e      	CP   R5,R30
00007d f408      	BRSH _0x7
00007e 9453      	INC  R5
                 ; 0000 001C     } else {
                 _0x7:
00007f c001      	RJMP _0x8
                 _0x6:
                 ; 0000 001D         sec++;
000080 9443      	INC  R4
                 ; 0000 001E     }
                 _0x8:
                 ; 0000 001F }
000081 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0022 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0023     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
000082 e0e0      	LDI  R30,LOW(0)
000083 bbea      	OUT  0x1A,R30
                 ; 0000 0024     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000084 bbeb      	OUT  0x1B,R30
                 ; 0000 0025     DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000085 bbe7      	OUT  0x17,R30
                 ; 0000 0026     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
000086 e0ef      	LDI  R30,LOW(15)
000087 bbe8      	OUT  0x18,R30
                 ; 0000 0027     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
000088 e0e0      	LDI  R30,LOW(0)
000089 bbe4      	OUT  0x14,R30
                 ; 0000 0028     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00008a bbe5      	OUT  0x15,R30
                 ; 0000 0029     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (1<<DDD0);
00008b e0e1      	LDI  R30,LOW(1)
00008c bbe1      	OUT  0x11,R30
                 ; 0000 002A     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00008d e0e0      	LDI  R30,LOW(0)
00008e bbe2      	OUT  0x12,R30
                 ; 0000 002B     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
00008f bfe3      	OUT  0x33,R30
                 ; 0000 002C     TCNT0=0x00;
000090 bfe2      	OUT  0x32,R30
                 ; 0000 002D     OCR0=0x00;
000091 bfec      	OUT  0x3C,R30
                 ; 0000 002E     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000092 bdef      	OUT  0x2F,R30
                 ; 0000 002F     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000093 bdee      	OUT  0x2E,R30
                 ; 0000 0030     TCNT1H=0x00;
000094 bded      	OUT  0x2D,R30
                 ; 0000 0031     TCNT1L=0x00;
000095 bdec      	OUT  0x2C,R30
                 ; 0000 0032     ICR1H=0x00;
000096 bde7      	OUT  0x27,R30
                 ; 0000 0033     ICR1L=0x00;
000097 bde6      	OUT  0x26,R30
                 ; 0000 0034     OCR1AH=0x00;
000098 bdeb      	OUT  0x2B,R30
                 ; 0000 0035     OCR1AL=0x00;
000099 bdea      	OUT  0x2A,R30
                 ; 0000 0036     OCR1BH=0x00;
00009a bde9      	OUT  0x29,R30
                 ; 0000 0037     OCR1BL=0x00;
00009b bde8      	OUT  0x28,R30
                 ; 0000 0038     ASSR=0<<AS2;
00009c bde2      	OUT  0x22,R30
                 ; 0000 0039     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
00009d bde5      	OUT  0x25,R30
                 ; 0000 003A     TCNT2=0x00;
00009e bde4      	OUT  0x24,R30
                 ; 0000 003B     OCR2=0x00;
00009f bde3      	OUT  0x23,R30
                 ; 0000 003C     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000a0 bfe9      	OUT  0x39,R30
                 ; 0000 003D     MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000a1 bfe5      	OUT  0x35,R30
                 ; 0000 003E     MCUCSR=(0<<ISC2);
0000a2 bfe4      	OUT  0x34,R30
                 ; 0000 003F     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000a3 b9ea      	OUT  0xA,R30
                 ; 0000 0040     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000a4 e8e0      	LDI  R30,LOW(128)
0000a5 b9e8      	OUT  0x8,R30
                 ; 0000 0041     SFIOR=(0<<ACME);
0000a6 e0e0      	LDI  R30,LOW(0)
0000a7 bfe0      	OUT  0x30,R30
                 ; 0000 0042     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000a8 b9e6      	OUT  0x6,R30
                 ; 0000 0043     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000a9 b9ed      	OUT  0xD,R30
                 ; 0000 0044     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000aa bfe6      	OUT  0x36,R30
                 ; 0000 0045 
                 ; 0000 0046     // Alphanumeric LCD initialization
                 ; 0000 0047     // Connections are specified in the
                 ; 0000 0048     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0049     // RS - PORTA Bit 0
                 ; 0000 004A     // RD - PORTA Bit 1
                 ; 0000 004B     // EN - PORTA Bit 2
                 ; 0000 004C     // D4 - PORTA Bit 3
                 ; 0000 004D     // D5 - PORTA Bit 4
                 ; 0000 004E     // D6 - PORTA Bit 5
                 ; 0000 004F     // D7 - PORTA Bit 6
                 ; 0000 0050     // Characters/line: 16
                 ; 0000 0051     lcd_init(16);
0000ab e1a0      	LDI  R26,LOW(16)
0000ac 940e 0325 	CALL _lcd_init
                 ; 0000 0052 
                 ; 0000 0053     while (1) {
                 _0x9:
                 ; 0000 0054         // sec + 1
                 ; 0000 0055         if (PINB.2 == 0 && mode == 0) { increment_time(); delay_ms(200); }
0000ae 99b2      	SBIC 0x16,2
0000af c002      	RJMP _0xD
0000b0 2077      	TST  R7
0000b1 f009      	BREQ _0xE
                 _0xD:
0000b2 c005      	RJMP _0xC
                 _0xE:
0000b3 dfc4      	RCALL _increment_time
0000b4 eca8      	LDI  R26,LOW(200)
0000b5 e0b0      	LDI  R27,0
0000b6 940e 03a5 	CALL _delay_ms
                 ; 0000 0056         // sec - 1
                 ; 0000 0057         if (PINB.3 == 0 && mode == 0) { decrement_time(); delay_ms(200); }
                 _0xC:
0000b8 99b3      	SBIC 0x16,3
0000b9 c002      	RJMP _0x10
0000ba 2077      	TST  R7
0000bb f009      	BREQ _0x11
                 _0x10:
0000bc c005      	RJMP _0xF
                 _0x11:
0000bd dfaf      	RCALL _decrement_time
0000be eca8      	LDI  R26,LOW(200)
0000bf e0b0      	LDI  R27,0
0000c0 940e 03a5 	CALL _delay_ms
                 ; 0000 0058         // reset
                 ; 0000 0059         if (PINB.0 == 0) {
                 _0xF:
0000c2 99b0      	SBIC 0x16,0
0000c3 c00a      	RJMP _0x12
                 ; 0000 005A             mode = 0;
0000c4 2477      	CLR  R7
                 ; 0000 005B             PORTC.7 = 0;
0000c5 98af      	CBI  0x15,7
                 ; 0000 005C             min = 1;
0000c6 e0e1      	LDI  R30,LOW(1)
0000c7 2e5e      	MOV  R5,R30
                 ; 0000 005D             sec = 30;
0000c8 e1ee      	LDI  R30,LOW(30)
0000c9 2e4e      	MOV  R4,R30
                 ; 0000 005E             delay_ms(10);
0000ca e0aa      	LDI  R26,LOW(10)
0000cb e0b0      	LDI  R27,0
0000cc 940e 03a5 	CALL _delay_ms
                 ; 0000 005F         }
                 ; 0000 0060         // start
                 ; 0000 0061         if (PINB.1 == 0) { mode = 1; delay_ms(10); }
                 _0x12:
0000ce 99b1      	SBIC 0x16,1
0000cf c006      	RJMP _0x15
0000d0 e0e1      	LDI  R30,LOW(1)
0000d1 2e7e      	MOV  R7,R30
0000d2 e0aa      	LDI  R26,LOW(10)
0000d3 e0b0      	LDI  R27,0
0000d4 940e 03a5 	CALL _delay_ms
                 ; 0000 0062 
                 ; 0000 0063         if (mode == 1) {
                 _0x15:
0000d6 e0e1      	LDI  R30,LOW(1)
0000d7 15e7      	CP   R30,R7
0000d8 f469      	BRNE _0x16
                 ; 0000 0064             if (min == 0 && sec == 0) mode = 2;
0000d9 2055      	TST  R5
0000da f411      	BRNE _0x18
0000db 2044      	TST  R4
0000dc f009      	BREQ _0x19
                 _0x18:
0000dd c002      	RJMP _0x17
                 _0x19:
0000de e0e2      	LDI  R30,LOW(2)
0000df 2e7e      	MOV  R7,R30
                 ; 0000 0065             delay_ms(500);
                 _0x17:
0000e0 efa4      	LDI  R26,LOW(500)
0000e1 e0b1      	LDI  R27,HIGH(500)
0000e2 940e 03a5 	CALL _delay_ms
                 ; 0000 0066             decrement_time();
0000e4 df88      	RCALL _decrement_time
                 ; 0000 0067         } else if (mode == 2) {
0000e5 c004      	RJMP _0x1A
                 _0x16:
0000e6 e0e2      	LDI  R30,LOW(2)
0000e7 15e7      	CP   R30,R7
0000e8 f409      	BRNE _0x1B
                 ; 0000 0068             PORTD.0 = 1;
0000e9 9a90      	SBI  0x12,0
                 ; 0000 0069         }
                 ; 0000 006A 
                 ; 0000 006B         sprintf(output, "%2d:%2d", min, sec);
                 _0x1B:
                 _0x1A:
0000ea e6e0      	LDI  R30,LOW(_output)
0000eb e0f2      	LDI  R31,HIGH(_output)
0000ec 93fa      	ST   -Y,R31
0000ed 93ea      	ST   -Y,R30
                +
0000ee e6ea     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
0000ef e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
0000f0 93fa      	ST   -Y,R31
0000f1 93ea      	ST   -Y,R30
0000f2 2de5      	MOV  R30,R5
0000f3 27ff      	CLR  R31
0000f4 2766      	CLR  R22
0000f5 2777      	CLR  R23
0000f6 940e 03bf 	CALL __PUTPARD1
0000f8 2de4      	MOV  R30,R4
0000f9 27ff      	CLR  R31
0000fa 2766      	CLR  R22
0000fb 2777      	CLR  R23
0000fc 940e 03bf 	CALL __PUTPARD1
0000fe e088      	LDI  R24,8
0000ff 940e 0281 	CALL _sprintf
000101 962c      	ADIW R28,12
                 ; 0000 006C         lcd_gotoxy(0, 0);
000102 e0e0      	LDI  R30,LOW(0)
000103 93ea      	ST   -Y,R30
000104 e0a0      	LDI  R26,LOW(0)
000105 940e 02e6 	CALL _lcd_gotoxy
                 ; 0000 006D         lcd_puts(output);
000107 e6a0      	LDI  R26,LOW(_output)
000108 e0b2      	LDI  R27,HIGH(_output)
000109 940e 0314 	CALL _lcd_puts
                 ; 0000 006E     }
00010b cfa2      	RJMP _0x9
                 ; 0000 006F }
                 _0x1E:
00010c cfff      	RJMP _0x1E
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00010d 93ba      	ST   -Y,R27
00010e 93aa      	ST   -Y,R26
00010f 931a      	ST   -Y,R17
000110 930a      	ST   -Y,R16
000111 81aa      	LDD  R26,Y+2
000112 81bb      	LDD  R27,Y+2+1
000113 9612      	ADIW R26,2
000114 940e 03b7 	CALL __GETW1P
000116 9730      	SBIW R30,0
000117 f159      	BREQ _0x2000010
000118 81aa      	LDD  R26,Y+2
000119 81bb      	LDD  R27,Y+2+1
00011a 9614      	ADIW R26,4
00011b 940e 03b7 	CALL __GETW1P
00011d 018f      	MOVW R16,R30
00011e 9730      	SBIW R30,0
00011f f061      	BREQ _0x2000012
                +
000120 3002     +CPI R16 , LOW ( 2 )
000121 e0e0     +LDI R30 , HIGH ( 2 )
000122 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000123 f098      	BRLO _0x2000013
000124 01f8      	MOVW R30,R16
000125 9731      	SBIW R30,1
000126 018f      	MOVW R16,R30
                +
000127 81aa     +LDD R26 , Y + 2
000128 81bb     +LDD R27 , Y + 2 + 1
000129 9614     +ADIW R26 , 4
00012a 93ed     +ST X + , R30
00012b 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00012c 81aa      	LDD  R26,Y+2
00012d 81bb      	LDD  R27,Y+2+1
00012e 9612      	ADIW R26,2
00012f 91ed      	LD   R30,X+
000130 91fd      	LD   R31,X+
000131 9631      	ADIW R30,1
000132 93fe      	ST   -X,R31
000133 93ee      	ST   -X,R30
000134 9731      	SBIW R30,1
000135 81ac      	LDD  R26,Y+4
000136 83a0      	STD  Z+0,R26
                 _0x2000013:
000137 81aa      	LDD  R26,Y+2
000138 81bb      	LDD  R27,Y+2+1
000139 940e 03b7 	CALL __GETW1P
00013b 23ff      	TST  R31
00013c f02a      	BRMI _0x2000014
00013d 91ed      	LD   R30,X+
00013e 91fd      	LD   R31,X+
00013f 9631      	ADIW R30,1
000140 93fe      	ST   -X,R31
000141 93ee      	ST   -X,R30
                 _0x2000014:
000142 c006      	RJMP _0x2000015
                 _0x2000010:
000143 81aa      	LDD  R26,Y+2
000144 81bb      	LDD  R27,Y+2+1
000145 efef      	LDI  R30,LOW(65535)
000146 efff      	LDI  R31,HIGH(65535)
000147 93ed      	ST   X+,R30
000148 93fc      	ST   X,R31
                 _0x2000015:
000149 8119      	LDD  R17,Y+1
00014a 8108      	LDD  R16,Y+0
00014b 9625      	ADIW R28,5
00014c 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00014d 93ba      	ST   -Y,R27
00014e 93aa      	ST   -Y,R26
00014f 9726      	SBIW R28,6
000150 940e 03c4 	CALL __SAVELOCR6
000152 e010      	LDI  R17,0
000153 85ac      	LDD  R26,Y+12
000154 85bd      	LDD  R27,Y+12+1
000155 e0e0      	LDI  R30,LOW(0)
000156 e0f0      	LDI  R31,HIGH(0)
000157 93ed      	ST   X+,R30
000158 93fc      	ST   X,R31
                 _0x2000016:
000159 89ea      	LDD  R30,Y+18
00015a 89fb      	LDD  R31,Y+18+1
00015b 9631      	ADIW R30,1
00015c 8bea      	STD  Y+18,R30
00015d 8bfb      	STD  Y+18+1,R31
00015e 9731      	SBIW R30,1
00015f 91e4      	LPM  R30,Z
000160 2f2e      	MOV  R18,R30
000161 30e0      	CPI  R30,0
000162 f409      	BRNE PC+2
000163 c115      	RJMP _0x2000018
000164 2fe1      	MOV  R30,R17
000165 30e0      	CPI  R30,0
000166 f439      	BRNE _0x200001C
000167 3225      	CPI  R18,37
000168 f411      	BRNE _0x200001D
000169 e011      	LDI  R17,LOW(1)
00016a c002      	RJMP _0x200001E
                 _0x200001D:
00016b 940e 036c 	CALL SUBOPT_0x0
                 _0x200001E:
00016d c10a      	RJMP _0x200001B
                 _0x200001C:
00016e 30e1      	CPI  R30,LOW(0x1)
00016f f4a9      	BRNE _0x200001F
000170 3225      	CPI  R18,37
000171 f419      	BRNE _0x2000020
000172 940e 036c 	CALL SUBOPT_0x0
000174 c102      	RJMP _0x20000CC
                 _0x2000020:
000175 e012      	LDI  R17,LOW(2)
000176 e040      	LDI  R20,LOW(0)
000177 e000      	LDI  R16,LOW(0)
000178 322d      	CPI  R18,45
000179 f411      	BRNE _0x2000021
00017a e001      	LDI  R16,LOW(1)
00017b c0fc      	RJMP _0x200001B
                 _0x2000021:
00017c 322b      	CPI  R18,43
00017d f411      	BRNE _0x2000022
00017e e24b      	LDI  R20,LOW(43)
00017f c0f8      	RJMP _0x200001B
                 _0x2000022:
000180 3220      	CPI  R18,32
000181 f411      	BRNE _0x2000023
000182 e240      	LDI  R20,LOW(32)
000183 c0f4      	RJMP _0x200001B
                 _0x2000023:
000184 c002      	RJMP _0x2000024
                 _0x200001F:
000185 30e2      	CPI  R30,LOW(0x2)
000186 f439      	BRNE _0x2000025
                 _0x2000024:
000187 e050      	LDI  R21,LOW(0)
000188 e013      	LDI  R17,LOW(3)
000189 3320      	CPI  R18,48
00018a f411      	BRNE _0x2000026
00018b 6800      	ORI  R16,LOW(128)
00018c c0eb      	RJMP _0x200001B
                 _0x2000026:
00018d c003      	RJMP _0x2000027
                 _0x2000025:
00018e 30e3      	CPI  R30,LOW(0x3)
00018f f009      	BREQ PC+2
000190 c0e7      	RJMP _0x200001B
                 _0x2000027:
000191 3320      	CPI  R18,48
000192 f010      	BRLO _0x200002A
000193 332a      	CPI  R18,58
000194 f008      	BRLO _0x200002B
                 _0x200002A:
000195 c007      	RJMP _0x2000029
                 _0x200002B:
000196 e0aa      	LDI  R26,LOW(10)
000197 9f5a      	MUL  R21,R26
000198 2d50      	MOV  R21,R0
000199 2fe2      	MOV  R30,R18
00019a 53e0      	SUBI R30,LOW(48)
00019b 0f5e      	ADD  R21,R30
00019c c0db      	RJMP _0x200001B
                 _0x2000029:
00019d 2fe2      	MOV  R30,R18
00019e 36e3      	CPI  R30,LOW(0x63)
00019f f449      	BRNE _0x200002F
0001a0 940e 0373 	CALL SUBOPT_0x1
0001a2 89e8      	LDD  R30,Y+16
0001a3 89f9      	LDD  R31,Y+16+1
0001a4 81a4      	LDD  R26,Z+4
0001a5 93aa      	ST   -Y,R26
0001a6 940e 0379 	CALL SUBOPT_0x2
0001a8 c0ce      	RJMP _0x2000030
                 _0x200002F:
0001a9 37e3      	CPI  R30,LOW(0x73)
0001aa f441      	BRNE _0x2000032
0001ab 940e 0373 	CALL SUBOPT_0x1
0001ad 940e 037f 	CALL SUBOPT_0x3
0001af 940e 0353 	CALL _strlen
0001b1 2f1e      	MOV  R17,R30
0001b2 c00a      	RJMP _0x2000033
                 _0x2000032:
0001b3 37e0      	CPI  R30,LOW(0x70)
0001b4 f461      	BRNE _0x2000035
0001b5 940e 0373 	CALL SUBOPT_0x1
0001b7 940e 037f 	CALL SUBOPT_0x3
0001b9 940e 035f 	CALL _strlenf
0001bb 2f1e      	MOV  R17,R30
0001bc 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0001bd 6002      	ORI  R16,LOW(2)
0001be 770f      	ANDI R16,LOW(127)
0001bf e030      	LDI  R19,LOW(0)
0001c0 c034      	RJMP _0x2000036
                 _0x2000035:
0001c1 36e4      	CPI  R30,LOW(0x64)
0001c2 f011      	BREQ _0x2000039
0001c3 36e9      	CPI  R30,LOW(0x69)
0001c4 f411      	BRNE _0x200003A
                 _0x2000039:
0001c5 6004      	ORI  R16,LOW(4)
0001c6 c002      	RJMP _0x200003B
                 _0x200003A:
0001c7 37e5      	CPI  R30,LOW(0x75)
0001c8 f431      	BRNE _0x200003C
                 _0x200003B:
0001c9 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0001ca e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0001cb 83ee      	STD  Y+6,R30
0001cc 83ff      	STD  Y+6+1,R31
0001cd e015      	LDI  R17,LOW(5)
0001ce c00c      	RJMP _0x200003D
                 _0x200003C:
0001cf 35e8      	CPI  R30,LOW(0x58)
0001d0 f411      	BRNE _0x200003F
0001d1 6008      	ORI  R16,LOW(8)
0001d2 c003      	RJMP _0x2000040
                 _0x200003F:
0001d3 37e8      	CPI  R30,LOW(0x78)
0001d4 f009      	BREQ PC+2
0001d5 c0a1      	RJMP _0x2000071
                 _0x2000040:
0001d6 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001d7 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001d8 83ee      	STD  Y+6,R30
0001d9 83ff      	STD  Y+6+1,R31
0001da e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001db ff02      	SBRS R16,2
0001dc c014      	RJMP _0x2000042
0001dd 940e 0373 	CALL SUBOPT_0x1
0001df 940e 0389 	CALL SUBOPT_0x4
0001e1 85ab      	LDD  R26,Y+11
0001e2 23aa      	TST  R26
0001e3 f43a      	BRPL _0x2000043
0001e4 85ea      	LDD  R30,Y+10
0001e5 85fb      	LDD  R31,Y+10+1
0001e6 940e 03b3 	CALL __ANEGW1
0001e8 87ea      	STD  Y+10,R30
0001e9 87fb      	STD  Y+10+1,R31
0001ea e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001eb 3040      	CPI  R20,0
0001ec f011      	BREQ _0x2000044
0001ed 5f1f      	SUBI R17,-LOW(1)
0001ee c001      	RJMP _0x2000045
                 _0x2000044:
0001ef 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001f0 c004      	RJMP _0x2000046
                 _0x2000042:
0001f1 940e 0373 	CALL SUBOPT_0x1
0001f3 940e 0389 	CALL SUBOPT_0x4
                 _0x2000046:
                 _0x2000036:
0001f5 fd00      	SBRC R16,0
0001f6 c011      	RJMP _0x2000047
                 _0x2000048:
0001f7 1715      	CP   R17,R21
0001f8 f478      	BRSH _0x200004A
0001f9 ff07      	SBRS R16,7
0001fa c008      	RJMP _0x200004B
0001fb ff02      	SBRS R16,2
0001fc c004      	RJMP _0x200004C
0001fd 7f0b      	ANDI R16,LOW(251)
0001fe 2f24      	MOV  R18,R20
0001ff 5011      	SUBI R17,LOW(1)
000200 c001      	RJMP _0x200004D
                 _0x200004C:
000201 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000202 c001      	RJMP _0x200004E
                 _0x200004B:
000203 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000204 940e 036c 	CALL SUBOPT_0x0
000206 5051      	SUBI R21,LOW(1)
000207 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000208 2f31      	MOV  R19,R17
000209 ff01      	SBRS R16,1
00020a c017      	RJMP _0x200004F
                 _0x2000050:
00020b 3030      	CPI  R19,0
00020c f0a1      	BREQ _0x2000052
00020d ff03      	SBRS R16,3
00020e c006      	RJMP _0x2000053
00020f 81ee      	LDD  R30,Y+6
000210 81ff      	LDD  R31,Y+6+1
000211 9125      	LPM  R18,Z+
000212 83ee      	STD  Y+6,R30
000213 83ff      	STD  Y+6+1,R31
000214 c005      	RJMP _0x2000054
                 _0x2000053:
000215 81ae      	LDD  R26,Y+6
000216 81bf      	LDD  R27,Y+6+1
000217 912d      	LD   R18,X+
000218 83ae      	STD  Y+6,R26
000219 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00021a 940e 036c 	CALL SUBOPT_0x0
00021c 3050      	CPI  R21,0
00021d f009      	BREQ _0x2000055
00021e 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00021f 5031      	SUBI R19,LOW(1)
000220 cfea      	RJMP _0x2000050
                 _0x2000052:
000221 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000222 e320      	LDI  R18,LOW(48)
000223 81ee      	LDD  R30,Y+6
000224 81ff      	LDD  R31,Y+6+1
000225 940e 03bb 	CALL __GETW1PF
000227 87e8      	STD  Y+8,R30
000228 87f9      	STD  Y+8+1,R31
000229 81ee      	LDD  R30,Y+6
00022a 81ff      	LDD  R31,Y+6+1
00022b 9632      	ADIW R30,2
00022c 83ee      	STD  Y+6,R30
00022d 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00022e 85e8      	LDD  R30,Y+8
00022f 85f9      	LDD  R31,Y+8+1
000230 85aa      	LDD  R26,Y+10
000231 85bb      	LDD  R27,Y+10+1
000232 17ae      	CP   R26,R30
000233 07bf      	CPC  R27,R31
000234 f050      	BRLO _0x200005C
000235 5f2f      	SUBI R18,-LOW(1)
000236 85a8      	LDD  R26,Y+8
000237 85b9      	LDD  R27,Y+8+1
000238 85ea      	LDD  R30,Y+10
000239 85fb      	LDD  R31,Y+10+1
00023a 1bea      	SUB  R30,R26
00023b 0bfb      	SBC  R31,R27
00023c 87ea      	STD  Y+10,R30
00023d 87fb      	STD  Y+10+1,R31
00023e cfef      	RJMP _0x200005A
                 _0x200005C:
00023f 332a      	CPI  R18,58
000240 f028      	BRLO _0x200005D
000241 ff03      	SBRS R16,3
000242 c002      	RJMP _0x200005E
000243 5f29      	SUBI R18,-LOW(7)
000244 c001      	RJMP _0x200005F
                 _0x200005E:
000245 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000246 fd04      	SBRC R16,4
000247 c01a      	RJMP _0x2000061
000248 3321      	CPI  R18,49
000249 f420      	BRSH _0x2000063
00024a 85a8      	LDD  R26,Y+8
00024b 85b9      	LDD  R27,Y+8+1
00024c 9711      	SBIW R26,1
00024d f409      	BRNE _0x2000062
                 _0x2000063:
00024e c009      	RJMP _0x20000CD
                 _0x2000062:
00024f 1753      	CP   R21,R19
000250 f010      	BRLO _0x2000067
000251 ff00      	SBRS R16,0
000252 c001      	RJMP _0x2000068
                 _0x2000067:
000253 c013      	RJMP _0x2000066
                 _0x2000068:
000254 e220      	LDI  R18,LOW(32)
000255 ff07      	SBRS R16,7
000256 c00b      	RJMP _0x2000069
000257 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000258 6100      	ORI  R16,LOW(16)
000259 ff02      	SBRS R16,2
00025a c007      	RJMP _0x200006A
00025b 7f0b      	ANDI R16,LOW(251)
00025c 934a      	ST   -Y,R20
00025d 940e 0379 	CALL SUBOPT_0x2
00025f 3050      	CPI  R21,0
000260 f009      	BREQ _0x200006B
000261 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000262 940e 036c 	CALL SUBOPT_0x0
000264 3050      	CPI  R21,0
000265 f009      	BREQ _0x200006C
000266 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000267 5031      	SUBI R19,LOW(1)
000268 85a8      	LDD  R26,Y+8
000269 85b9      	LDD  R27,Y+8+1
00026a 9712      	SBIW R26,2
00026b f008      	BRLO _0x2000059
00026c cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00026d ff00      	SBRS R16,0
00026e c008      	RJMP _0x200006D
                 _0x200006E:
00026f 3050      	CPI  R21,0
000270 f031      	BREQ _0x2000070
000271 5051      	SUBI R21,LOW(1)
000272 e2e0      	LDI  R30,LOW(32)
000273 93ea      	ST   -Y,R30
000274 940e 0379 	CALL SUBOPT_0x2
000276 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000277 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000278 cee0      	RJMP _0x2000016
                 _0x2000018:
000279 85ac      	LDD  R26,Y+12
00027a 85bd      	LDD  R27,Y+12+1
00027b 940e 03b7 	CALL __GETW1P
00027d 940e 03cb 	CALL __LOADLOCR6
00027f 9664      	ADIW R28,20
000280 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000281 92ff      	PUSH R15
000282 2ef8      	MOV  R15,R24
000283 9726      	SBIW R28,6
000284 940e 03c6 	CALL __SAVELOCR4
000286 940e 0391 	CALL SUBOPT_0x5
000288 9730      	SBIW R30,0
000289 f419      	BRNE _0x2000072
00028a efef      	LDI  R30,LOW(65535)
00028b efff      	LDI  R31,HIGH(65535)
00028c c023      	RJMP _0x2080002
                 _0x2000072:
00028d 01de      	MOVW R26,R28
00028e 9616      	ADIW R26,6
00028f 940e 03af 	CALL __ADDW2R15
000291 018d      	MOVW R16,R26
000292 940e 0391 	CALL SUBOPT_0x5
000294 83ee      	STD  Y+6,R30
000295 83ff      	STD  Y+6+1,R31
000296 e0e0      	LDI  R30,LOW(0)
000297 87e8      	STD  Y+8,R30
000298 87e9      	STD  Y+8+1,R30
000299 01de      	MOVW R26,R28
00029a 961a      	ADIW R26,10
00029b 940e 03af 	CALL __ADDW2R15
00029d 940e 03b7 	CALL __GETW1P
00029f 93fa      	ST   -Y,R31
0002a0 93ea      	ST   -Y,R30
0002a1 931a      	ST   -Y,R17
0002a2 930a      	ST   -Y,R16
0002a3 e0ed      	LDI  R30,LOW(_put_buff_G100)
0002a4 e0f1      	LDI  R31,HIGH(_put_buff_G100)
0002a5 93fa      	ST   -Y,R31
0002a6 93ea      	ST   -Y,R30
0002a7 01de      	MOVW R26,R28
0002a8 961a      	ADIW R26,10
0002a9 dea3      	RCALL __print_G100
0002aa 019f      	MOVW R18,R30
0002ab 81ae      	LDD  R26,Y+6
0002ac 81bf      	LDD  R27,Y+6+1
0002ad e0e0      	LDI  R30,LOW(0)
0002ae 93ec      	ST   X,R30
0002af 01f9      	MOVW R30,R18
                 _0x2080002:
0002b0 940e 03cd 	CALL __LOADLOCR4
0002b2 962a      	ADIW R28,10
0002b3 90ff      	POP  R15
0002b4 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0002b5 93aa      	ST   -Y,R26
0002b6 81e8      	LD   R30,Y
0002b7 71e0      	ANDI R30,LOW(0x10)
0002b8 f011      	BREQ _0x2020004
0002b9 9adb      	SBI  0x1B,3
0002ba c001      	RJMP _0x2020005
                 _0x2020004:
0002bb 98db      	CBI  0x1B,3
                 _0x2020005:
0002bc 81e8      	LD   R30,Y
0002bd 72e0      	ANDI R30,LOW(0x20)
0002be f011      	BREQ _0x2020006
0002bf 9adc      	SBI  0x1B,4
0002c0 c001      	RJMP _0x2020007
                 _0x2020006:
0002c1 98dc      	CBI  0x1B,4
                 _0x2020007:
0002c2 81e8      	LD   R30,Y
0002c3 74e0      	ANDI R30,LOW(0x40)
0002c4 f011      	BREQ _0x2020008
0002c5 9add      	SBI  0x1B,5
0002c6 c001      	RJMP _0x2020009
                 _0x2020008:
0002c7 98dd      	CBI  0x1B,5
                 _0x2020009:
0002c8 81e8      	LD   R30,Y
0002c9 78e0      	ANDI R30,LOW(0x80)
0002ca f011      	BREQ _0x202000A
0002cb 9ade      	SBI  0x1B,6
0002cc c001      	RJMP _0x202000B
                 _0x202000A:
0002cd 98de      	CBI  0x1B,6
                 _0x202000B:
                +
0002ce e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002cf 958a     +DEC R24
0002d0 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002d1 9ada      	SBI  0x1B,2
                +
0002d2 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002d3 958a     +DEC R24
0002d4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002d5 98da      	CBI  0x1B,2
                +
0002d6 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0002d7 958a     +DEC R24
0002d8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0002d9 c077      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0002da 93aa      	ST   -Y,R26
0002db 81a8      	LD   R26,Y
0002dc dfd8      	RCALL __lcd_write_nibble_G101
0002dd 81e8          ld    r30,y
0002de 95e2          swap  r30
0002df 83e8          st    y,r30
0002e0 81a8      	LD   R26,Y
0002e1 dfd3      	RCALL __lcd_write_nibble_G101
                +
0002e2 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0002e3 958a     +DEC R24
0002e4 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0002e5 c06b      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0002e6 93aa      	ST   -Y,R26
0002e7 81e8      	LD   R30,Y
0002e8 e0f0      	LDI  R31,0
0002e9 59e6      	SUBI R30,LOW(-__base_y_G101)
0002ea 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0002eb 81e0      	LD   R30,Z
0002ec 81a9      	LDD  R26,Y+1
0002ed 0fae      	ADD  R26,R30
0002ee dfeb      	RCALL __lcd_write_data
0002ef 8069      	LDD  R6,Y+1
0002f0 8098      	LDD  R9,Y+0
0002f1 9622      	ADIW R28,2
0002f2 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0002f3 e0a2      	LDI  R26,LOW(2)
0002f4 940e 0398 	CALL SUBOPT_0x6
0002f6 e0ac      	LDI  R26,LOW(12)
0002f7 dfe2      	RCALL __lcd_write_data
0002f8 e0a1      	LDI  R26,LOW(1)
0002f9 940e 0398 	CALL SUBOPT_0x6
0002fb e0e0      	LDI  R30,LOW(0)
0002fc 2e9e      	MOV  R9,R30
0002fd 2e6e      	MOV  R6,R30
0002fe 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0002ff 93aa      	ST   -Y,R26
000300 81a8      	LD   R26,Y
000301 30aa      	CPI  R26,LOW(0xA)
000302 f011      	BREQ _0x2020011
000303 1468      	CP   R6,R8
000304 f048      	BRLO _0x2020010
                 _0x2020011:
000305 e0e0      	LDI  R30,LOW(0)
000306 93ea      	ST   -Y,R30
000307 9493      	INC  R9
000308 2da9      	MOV  R26,R9
000309 dfdc      	RCALL _lcd_gotoxy
00030a 81a8      	LD   R26,Y
00030b 30aa      	CPI  R26,LOW(0xA)
00030c f409      	BRNE _0x2020013
00030d c043      	RJMP _0x2080001
                 _0x2020013:
                 _0x2020010:
00030e 9463      	INC  R6
00030f 9ad8      	SBI  0x1B,0
000310 81a8      	LD   R26,Y
000311 dfc8      	RCALL __lcd_write_data
000312 98d8      	CBI  0x1B,0
000313 c03d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000314 93ba      	ST   -Y,R27
000315 93aa      	ST   -Y,R26
000316 931a      	ST   -Y,R17
                 _0x2020014:
000317 81a9      	LDD  R26,Y+1
000318 81ba      	LDD  R27,Y+1+1
000319 91ed      	LD   R30,X+
00031a 83a9      	STD  Y+1,R26
00031b 83ba      	STD  Y+1+1,R27
00031c 2f1e      	MOV  R17,R30
00031d 30e0      	CPI  R30,0
00031e f019      	BREQ _0x2020016
00031f 2fa1      	MOV  R26,R17
000320 dfde      	RCALL _lcd_putchar
000321 cff5      	RJMP _0x2020014
                 _0x2020016:
000322 8118      	LDD  R17,Y+0
000323 9623      	ADIW R28,3
000324 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000325 93aa      	ST   -Y,R26
000326 9ad3      	SBI  0x1A,3
000327 9ad4      	SBI  0x1A,4
000328 9ad5      	SBI  0x1A,5
000329 9ad6      	SBI  0x1A,6
00032a 9ad2      	SBI  0x1A,2
00032b 9ad0      	SBI  0x1A,0
00032c 9ad1      	SBI  0x1A,1
00032d 98da      	CBI  0x1B,2
00032e 98d8      	CBI  0x1B,0
00032f 98d9      	CBI  0x1B,1
000330 8088      	LDD  R8,Y+0
000331 81e8      	LD   R30,Y
000332 58e0      	SUBI R30,-LOW(128)
                +
000333 93e0 026c+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000335 81e8      	LD   R30,Y
000336 54e0      	SUBI R30,-LOW(192)
                +
000337 93e0 026d+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000339 e1a4      	LDI  R26,LOW(20)
00033a e0b0      	LDI  R27,0
00033b 940e 03a5 	CALL _delay_ms
00033d 940e 039e 	CALL SUBOPT_0x7
00033f 940e 039e 	CALL SUBOPT_0x7
000341 940e 039e 	CALL SUBOPT_0x7
000343 e2a0      	LDI  R26,LOW(32)
000344 df70      	RCALL __lcd_write_nibble_G101
                +
000345 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000346 958a     +DEC R24
000347 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000348 e2a8      	LDI  R26,LOW(40)
000349 df90      	RCALL __lcd_write_data
00034a e0a4      	LDI  R26,LOW(4)
00034b df8e      	RCALL __lcd_write_data
00034c e8a5      	LDI  R26,LOW(133)
00034d df8c      	RCALL __lcd_write_data
00034e e0a6      	LDI  R26,LOW(6)
00034f df8a      	RCALL __lcd_write_data
000350 dfa2      	RCALL _lcd_clear
                 _0x2080001:
000351 9621      	ADIW R28,1
000352 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000353 93ba      	ST   -Y,R27
000354 93aa      	ST   -Y,R26
000355 91a9          ld   r26,y+
000356 91b9          ld   r27,y+
000357 27ee          clr  r30
000358 27ff          clr  r31
                 strlen0:
000359 916d          ld   r22,x+
00035a 2366          tst  r22
00035b f011          breq strlen1
00035c 9631          adiw r30,1
00035d cffb          rjmp strlen0
                 strlen1:
00035e 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00035f 93ba      	ST   -Y,R27
000360 93aa      	ST   -Y,R26
000361 27aa          clr  r26
000362 27bb          clr  r27
000363 91e9          ld   r30,y+
000364 91f9          ld   r31,y+
                 strlenf0:
000365 9005      	lpm  r0,z+
000366 2000          tst  r0
000367 f011          breq strlenf1
000368 9611          adiw r26,1
000369 cffb          rjmp strlenf0
                 strlenf1:
00036a 01fd          movw r30,r26
00036b 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _output:
000260           	.BYTE 0xA
                 __base_y_G101:
00026a           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
00036c 932a      	ST   -Y,R18
00036d 85ad      	LDD  R26,Y+13
00036e 85be      	LDD  R27,Y+13+1
00036f 85ef      	LDD  R30,Y+15
000370 89f8      	LDD  R31,Y+15+1
000371 9509      	ICALL
000372 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x1:
000373 89e8      	LDD  R30,Y+16
000374 89f9      	LDD  R31,Y+16+1
000375 9734      	SBIW R30,4
000376 8be8      	STD  Y+16,R30
000377 8bf9      	STD  Y+16+1,R31
000378 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
000379 85ad      	LDD  R26,Y+13
00037a 85be      	LDD  R27,Y+13+1
00037b 85ef      	LDD  R30,Y+15
00037c 89f8      	LDD  R31,Y+15+1
00037d 9509      	ICALL
00037e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
00037f 89a8      	LDD  R26,Y+16
000380 89b9      	LDD  R27,Y+16+1
000381 9614      	ADIW R26,4
000382 940e 03b7 	CALL __GETW1P
000384 83ee      	STD  Y+6,R30
000385 83ff      	STD  Y+6+1,R31
000386 81ae      	LDD  R26,Y+6
000387 81bf      	LDD  R27,Y+6+1
000388 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
000389 89a8      	LDD  R26,Y+16
00038a 89b9      	LDD  R27,Y+16+1
00038b 9614      	ADIW R26,4
00038c 940e 03b7 	CALL __GETW1P
00038e 87ea      	STD  Y+10,R30
00038f 87fb      	STD  Y+10+1,R31
000390 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x5:
000391 01de      	MOVW R26,R28
000392 961c      	ADIW R26,12
000393 940e 03af 	CALL __ADDW2R15
000395 940e 03b7 	CALL __GETW1P
000397 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000398 940e 02da 	CALL __lcd_write_data
00039a e0a3      	LDI  R26,LOW(3)
00039b e0b0      	LDI  R27,0
00039c 940c 03a5 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x7:
00039e e3a0      	LDI  R26,LOW(48)
00039f 940e 02b5 	CALL __lcd_write_nibble_G101
                +
0003a1 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0003a2 958a     +DEC R24
0003a3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0003a4 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003a5 9610      	adiw r26,0
0003a6 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003a7 ef8a     +LDI R24 , LOW ( 0xFA )
0003a8 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0003a9 9701     +SBIW R24 , 1
0003aa f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
0003ab 95a8      	wdr
0003ac 9711      	sbiw r26,1
0003ad f7c9      	brne __delay_ms0
                 __delay_ms1:
0003ae 9508      	ret
                 
                 __ADDW2R15:
0003af 2400      	CLR  R0
0003b0 0daf      	ADD  R26,R15
0003b1 1db0      	ADC  R27,R0
0003b2 9508      	RET
                 
                 __ANEGW1:
0003b3 95f1      	NEG  R31
0003b4 95e1      	NEG  R30
0003b5 40f0      	SBCI R31,0
0003b6 9508      	RET
                 
                 __GETW1P:
0003b7 91ed      	LD   R30,X+
0003b8 91fc      	LD   R31,X
0003b9 9711      	SBIW R26,1
0003ba 9508      	RET
                 
                 __GETW1PF:
0003bb 9005      	LPM  R0,Z+
0003bc 91f4      	LPM  R31,Z
0003bd 2de0      	MOV  R30,R0
0003be 9508      	RET
                 
                 __PUTPARD1:
0003bf 937a      	ST   -Y,R23
0003c0 936a      	ST   -Y,R22
0003c1 93fa      	ST   -Y,R31
0003c2 93ea      	ST   -Y,R30
0003c3 9508      	RET
                 
                 __SAVELOCR6:
0003c4 935a      	ST   -Y,R21
                 __SAVELOCR5:
0003c5 934a      	ST   -Y,R20
                 __SAVELOCR4:
0003c6 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003c7 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003c8 931a      	ST   -Y,R17
0003c9 930a      	ST   -Y,R16
0003ca 9508      	RET
                 
                 __LOADLOCR6:
0003cb 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0003cc 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0003cd 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003ce 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003cf 8119      	LDD  R17,Y+1
0003d0 8108      	LD   R16,Y
0003d1 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   9 r5 :   7 r6 :   4 r7 :   7 
r8 :   2 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:   7 r23:   3 
r24:  23 r25:   3 r26: 100 r27:  42 r28:  14 r29:   1 r30: 205 r31:  59 
x  :  23 y  : 169 z  :  15 
Registers used: 28 out of 35 (80.0%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   3 
adiw  :  24 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  24 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  35 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  57 
cbi   :  10 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  15 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   9 cpc   :   2 cpi   :  33 cpse  :   0 dec   :   9 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   0 inc   :   4 jmp   :  23 ld    :  28 ldd   :  77 ldi   : 109 
lds   :   0 lpm   :  14 lsl   :   0 lsr   :   0 mov   :  23 movw  :  14 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   6 out   :  39 pop   :   1 push  :   1 rcall :  17 ret   :  26 
reti  :   0 rjmp  :  73 rol   :   0 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :  14 sbic  :   4 sbis  :   0 sbiw  :  17 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  59 std   :  31 sts   :   2 sub   :   1 subi  :  16 swap  :   1 
tst   :   9 wdr   :   1 
Instructions used: 51 out of 116 (44.0%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007a4   1910     46   1956   32768   6.0%
[.dseg] 0x000060 0x00026e      0     14     14    2048   0.7%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
