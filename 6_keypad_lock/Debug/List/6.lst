
AVRASM ver. 2.1.30  C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\6-2\Debug\List\6.asm Wed May 31 01:59:47 2023

C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\6-2\Debug\List\6.asm(1087): warning: Register r5 already defined by the .DEF directive
C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\6-2\Debug\List\6.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\6-2\Debug\List\6.asm(1089): warning: Register r7 already defined by the .DEF directive
C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\6-2\Debug\List\6.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\6-2\Debug\List\6.asm(1091): warning: Register r9 already defined by the .DEF directive
C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\6-2\Debug\List\6.asm(1092): warning: Register r8 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32A
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32A
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _key=R5
                 	.DEF _counter=R4
                 	.DEF _mode=R7
                 	.DEF __lcd_x=R6
                 	.DEF __lcd_y=R9
                 	.DEF __lcd_maxx=R8
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 007f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000035 3231
000036 3433      	.DB  0x31,0x32,0x33,0x34
                 _0x0:
000037 4f4c
000038 4b43
000039 4445
00003a 4500      	.DB  0x4C,0x4F,0x43,0x4B,0x45,0x44,0x0,0x45
00003b 544e
00003c 5245
00003d 4e20
00003e 5745      	.DB  0x4E,0x54,0x45,0x52,0x20,0x4E,0x45,0x57
00003f 500a
000040 5341
000041 2053
000042 4f43      	.DB  0xA,0x50,0x41,0x53,0x53,0x20,0x43,0x4F
000043 4544
000044 5000
000045 5341
000046 2053      	.DB  0x44,0x45,0x0,0x50,0x41,0x53,0x53,0x20
000047 4f43
000048 4544
000049 430a
00004a 4148      	.DB  0x43,0x4F,0x44,0x45,0xA,0x43,0x48,0x41
00004b 474e
00004c 4445
00004d 002e
00004e 504f      	.DB  0x4E,0x47,0x45,0x44,0x2E,0x0,0x4F,0x50
00004f 4e45
000050 5700
000051 4f52
000052 474e      	.DB  0x45,0x4E,0x0,0x57,0x52,0x4F,0x4E,0x47
000053 5020
000054 5341
000055 2053
000056 4f43      	.DB  0x20,0x50,0x41,0x53,0x53,0x20,0x43,0x4F
000057 4544
C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\6-2\Debug\List\6.asm(1144): warning: .cseg .db misalignment - padding zero byte
000058 0000      	.DB  0x44,0x45,0x0
                 _0x2020003:
000059 c080      	.DB  0x80,0xC0
                 _0x2040060:
C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\6-2\Debug\List\6.asm(1148): warning: .cseg .db misalignment - padding zero byte
00005a 0001      	.DB  0x1
                 _0x2040000:
00005b 4e2d
00005c 4e41
00005d 4900
00005e 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\nimap\Desktop\Uni Stuff\401-2\Microprocessor Lab\Reports\6-2\Debug\List\6.asm(1151): warning: .cseg .db misalignment - padding zero byte
00005f 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000060 0004      	.DW  0x04
000061 0004      	.DW  0x04
000062 0066      	.DW  __REG_VARS*2
                 
000063 0004      	.DW  0x04
000064 02ca      	.DW  _passcode
000065 006a      	.DW  _0x3*2
                 
000066 0007      	.DW  0x07
000067 0260      	.DW  _0x4
000068 006e      	.DW  _0x0*2
                 
000069 0007      	.DW  0x07
00006a 0267      	.DW  _0x4+7
00006b 006e      	.DW  _0x0*2
                 
00006c 0014      	.DW  0x14
00006d 026e      	.DW  _0x4+14
00006e 0075      	.DW  _0x0*2+7
                 
00006f 0013      	.DW  0x13
000070 0282      	.DW  _0x4+34
000071 0089      	.DW  _0x0*2+27
                 
000072 0005      	.DW  0x05
000073 0295      	.DW  _0x4+53
000074 009c      	.DW  _0x0*2+46
                 
000075 0010      	.DW  0x10
000076 029a      	.DW  _0x4+58
000077 00a1      	.DW  _0x0*2+51
                 
000078 0002      	.DW  0x02
000079 02d4      	.DW  __base_y_G101
00007a 00b2      	.DW  _0x2020003*2
                 
00007b 0001      	.DW  0x01
00007c 02d8      	.DW  __seed_G102
00007d 00b4      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
00007e 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00007f 94f8      	CLI
000080 27ee      	CLR  R30
000081 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000082 e0f1      	LDI  R31,1
000083 bff5      	OUT  MCUCR,R31
000084 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000085 e08d      	LDI  R24,(14-2)+1
000086 e0a2      	LDI  R26,2
000087 27bb      	CLR  R27
                 __CLEAR_REG:
000088 93ed      	ST   X+,R30
000089 958a      	DEC  R24
00008a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00008b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00008c e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00008d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00008e 93ed      	ST   X+,R30
00008f 9701      	SBIW R24,1
000090 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000091 ece0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000092 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000093 9185      	LPM  R24,Z+
000094 9195      	LPM  R25,Z+
000095 9700      	SBIW R24,0
000096 f061      	BREQ __GLOBAL_INI_END
000097 91a5      	LPM  R26,Z+
000098 91b5      	LPM  R27,Z+
000099 9005      	LPM  R0,Z+
00009a 9015      	LPM  R1,Z+
00009b 01bf      	MOVW R22,R30
00009c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00009d 9005      	LPM  R0,Z+
00009e 920d      	ST   X+,R0
00009f 9701      	SBIW R24,1
0000a0 f7e1      	BRNE __GLOBAL_INI_LOOP
0000a1 01fb      	MOVW R30,R22
0000a2 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
0000a3 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
0000a4 bfed      	OUT  SPL,R30
0000a5 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
0000a6 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a7 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a8 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a9 940c 00ab 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32a.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdlib.h>
                 ;#include <string.h>
                 ;
                 ;#define ENTER 0
                 ;#define RESET 1
                 ;#define OPEN  2
                 ;
                 ;void keypad(void);
                 ;unsigned char key;
                 ;char output[32];
                 ;char passcode[5] = "1234";
                 
                 	.DSEG
                 ;char buffer[5];
                 ;char counter = 0;
                 ;char mode = 0;
                 ;
                 ;void main(void)
                 ; 0000 0015 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0016     DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000ab e0e0      	LDI  R30,LOW(0)
0000ac bbea      	OUT  0x1A,R30
                 ; 0000 0017     PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000ad bbeb      	OUT  0x1B,R30
                 ; 0000 0018     DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0000ae efe0      	LDI  R30,LOW(240)
0000af bbe7      	OUT  0x17,R30
                 ; 0000 0019     PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (1<<PORTB3) | (1<<PORTB2) | (1<<PORTB1) | (1<<PORTB0);
0000b0 e0ef      	LDI  R30,LOW(15)
0000b1 bbe8      	OUT  0x18,R30
                 ; 0000 001A     DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0000b2 e0e0      	LDI  R30,LOW(0)
0000b3 bbe4      	OUT  0x14,R30
                 ; 0000 001B     PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0000b4 bbe5      	OUT  0x15,R30
                 ; 0000 001C     DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0000b5 bbe1      	OUT  0x11,R30
                 ; 0000 001D     PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0000b6 bbe2      	OUT  0x12,R30
                 ; 0000 001E     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000b7 bfe3      	OUT  0x33,R30
                 ; 0000 001F     TCNT0=0x00;
0000b8 bfe2      	OUT  0x32,R30
                 ; 0000 0020     OCR0=0x00;
0000b9 bfec      	OUT  0x3C,R30
                 ; 0000 0021     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000ba bdef      	OUT  0x2F,R30
                 ; 0000 0022     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000bb bdee      	OUT  0x2E,R30
                 ; 0000 0023     TCNT1H=0x00;
0000bc bded      	OUT  0x2D,R30
                 ; 0000 0024     TCNT1L=0x00;
0000bd bdec      	OUT  0x2C,R30
                 ; 0000 0025     ICR1H=0x00;
0000be bde7      	OUT  0x27,R30
                 ; 0000 0026     ICR1L=0x00;
0000bf bde6      	OUT  0x26,R30
                 ; 0000 0027     OCR1AH=0x00;
0000c0 bdeb      	OUT  0x2B,R30
                 ; 0000 0028     OCR1AL=0x00;
0000c1 bdea      	OUT  0x2A,R30
                 ; 0000 0029     OCR1BH=0x00;
0000c2 bde9      	OUT  0x29,R30
                 ; 0000 002A     OCR1BL=0x00;
0000c3 bde8      	OUT  0x28,R30
                 ; 0000 002B     ASSR=0<<AS2;
0000c4 bde2      	OUT  0x22,R30
                 ; 0000 002C     TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000c5 bde5      	OUT  0x25,R30
                 ; 0000 002D     TCNT2=0x00;
0000c6 bde4      	OUT  0x24,R30
                 ; 0000 002E     OCR2=0x00;
0000c7 bde3      	OUT  0x23,R30
                 ; 0000 002F     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000c8 bfe9      	OUT  0x39,R30
                 ; 0000 0030     MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000c9 bfe5      	OUT  0x35,R30
                 ; 0000 0031     MCUCSR=(0<<ISC2);
0000ca bfe4      	OUT  0x34,R30
                 ; 0000 0032     UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000cb b9ea      	OUT  0xA,R30
                 ; 0000 0033     ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000cc e8e0      	LDI  R30,LOW(128)
0000cd b9e8      	OUT  0x8,R30
                 ; 0000 0034     SFIOR=(0<<ACME);
0000ce e0e0      	LDI  R30,LOW(0)
0000cf bfe0      	OUT  0x30,R30
                 ; 0000 0035     ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000d0 b9e6      	OUT  0x6,R30
                 ; 0000 0036     SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000d1 b9ed      	OUT  0xD,R30
                 ; 0000 0037     TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000d2 bfe6      	OUT  0x36,R30
                 ; 0000 0038 
                 ; 0000 0039     // Alphanumeric LCD initialization
                 ; 0000 003A     // Connections are specified in the
                 ; 0000 003B     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 003C     // RS - PORTA Bit 0
                 ; 0000 003D     // RD - PORTA Bit 1
                 ; 0000 003E     // EN - PORTA Bit 2
                 ; 0000 003F     // D4 - PORTA Bit 3
                 ; 0000 0040     // D5 - PORTA Bit 4
                 ; 0000 0041     // D6 - PORTA Bit 5
                 ; 0000 0042     // D7 - PORTA Bit 6
                 ; 0000 0043     // Characters/line: 16
                 ; 0000 0044     lcd_init(16);
0000d3 e1a0      	LDI  R26,LOW(16)
0000d4 940e 0210 	CALL _lcd_init
                 ; 0000 0045     lcd_clear();
0000d6 940e 01de 	CALL _lcd_clear
                 ; 0000 0046     lcd_puts("LOCKED");
                +
0000d8 e6a0     +LDI R26 , LOW ( _0x4 + ( 0 ) )
0000d9 e0b2     +LDI R27 , HIGH ( _0x4 + ( 0 ) )
                 	__POINTW2MN _0x4,0
0000da 940e 01ff 	CALL _lcd_puts
                 ; 0000 0047 
                 ; 0000 0048     while (1) {
                 _0x5:
                 ; 0000 0049         keypad();
0000dc d075      	RCALL _keypad
                 ; 0000 004A 
                 ; 0000 004B         if (PIND.0 == 0 && (mode == OPEN || mode == RESET)) {
0000dd 9980      	SBIC 0x10,0
0000de c007      	RJMP _0x9
0000df e0e2      	LDI  R30,LOW(2)
0000e0 15e7      	CP   R30,R7
0000e1 f019      	BREQ _0xA
0000e2 e0e1      	LDI  R30,LOW(1)
0000e3 15e7      	CP   R30,R7
0000e4 f409      	BRNE _0x9
                 _0xA:
0000e5 c001      	RJMP _0xC
                 _0x9:
0000e6 c00a      	RJMP _0x8
                 _0xC:
                 ; 0000 004C             key = 12;
0000e7 e0ec      	LDI  R30,LOW(12)
0000e8 2e5e      	MOV  R5,R30
                 ; 0000 004D             counter = 0;
0000e9 2444      	CLR  R4
                 ; 0000 004E             strcpy(output, "LOCKED");
0000ea 940e 025f 	CALL SUBOPT_0x0
                +
0000ec e6a7     +LDI R26 , LOW ( _0x4 + ( 7 ) )
0000ed e0b2     +LDI R27 , HIGH ( _0x4 + ( 7 ) )
                 	__POINTW2MN _0x4,7
0000ee 940e 0252 	CALL _strcpy
                 ; 0000 004F             mode = ENTER;
0000f0 2477      	CLR  R7
                 ; 0000 0050         }
                 ; 0000 0051 
                 ; 0000 0052         if (counter == 0) buffer[0] = '\0';
                 _0x8:
0000f1 2044      	TST  R4
0000f2 f419      	BRNE _0xD
0000f3 e0e0      	LDI  R30,LOW(0)
0000f4 93e0 02cf 	STS  _buffer,R30
                 ; 0000 0053 
                 ; 0000 0054         if (mode == OPEN) {
                 _0xD:
0000f6 e0e2      	LDI  R30,LOW(2)
0000f7 15e7      	CP   R30,R7
0000f8 f469      	BRNE _0xE
                 ; 0000 0055             if (key == '#') {
0000f9 e2e3      	LDI  R30,LOW(35)
0000fa 15e5      	CP   R30,R5
0000fb f449      	BRNE _0xF
                 ; 0000 0056                 mode = RESET;
0000fc e0e1      	LDI  R30,LOW(1)
0000fd 2e7e      	MOV  R7,R30
                 ; 0000 0057                 counter = 0;
0000fe 2444      	CLR  R4
                 ; 0000 0058                 strcpy(output, "ENTER NEW\nPASS CODE");
0000ff 940e 025f 	CALL SUBOPT_0x0
                +
000101 e6ae     +LDI R26 , LOW ( _0x4 + ( 14 ) )
000102 e0b2     +LDI R27 , HIGH ( _0x4 + ( 14 ) )
                 	__POINTW2MN _0x4,14
000103 940e 0252 	CALL _strcpy
                 ; 0000 0059             }
                 ; 0000 005A         } else if (key != 0 && key != '#' && key != 12) {
                 _0xF:
000105 c01b      	RJMP _0x10
                 _0xE:
000106 2055      	TST  R5
000107 f031      	BREQ _0x12
000108 e2e3      	LDI  R30,LOW(35)
000109 15e5      	CP   R30,R5
00010a f019      	BREQ _0x12
00010b e0ec      	LDI  R30,LOW(12)
00010c 15e5      	CP   R30,R5
00010d f409      	BRNE _0x13
                 _0x12:
00010e c012      	RJMP _0x11
                 _0x13:
                 ; 0000 005B             buffer[counter] = key;
00010f 2de4      	MOV  R30,R4
000110 e0f0      	LDI  R31,0
000111 53e1      	SUBI R30,LOW(-_buffer)
000112 4ffd      	SBCI R31,HIGH(-_buffer)
000113 8250      	ST   Z,R5
                 ; 0000 005C             buffer[counter + 1] = '\0';
000114 2de4      	MOV  R30,R4
000115 e0f0      	LDI  R31,0
                +
000116 53e0     +SUBI R30 , LOW ( - _buffer - ( 1 ) )
000117 4ffd     +SBCI R31 , HIGH ( - _buffer - ( 1 ) )
                 	__ADDW1MN _buffer,1
000118 e0a0      	LDI  R26,LOW(0)
000119 83a0      	STD  Z+0,R26
                 ; 0000 005D             counter++;
00011a 9443      	INC  R4
                 ; 0000 005E             strcpy(output, buffer);
00011b 940e 025f 	CALL SUBOPT_0x0
00011d ecaf      	LDI  R26,LOW(_buffer)
00011e e0b2      	LDI  R27,HIGH(_buffer)
00011f 940e 0252 	CALL _strcpy
                 ; 0000 005F         }
                 ; 0000 0060 
                 ; 0000 0061         if (counter == 4) {
                 _0x11:
                 _0x10:
000121 e0e4      	LDI  R30,LOW(4)
000122 15e4      	CP   R30,R4
000123 f521      	BRNE _0x14
                 ; 0000 0062             if (mode == RESET) {
000124 e0e1      	LDI  R30,LOW(1)
000125 15e7      	CP   R30,R7
000126 f469      	BRNE _0x15
                 ; 0000 0063                 strcpy(passcode, buffer);
000127 940e 0264 	CALL SUBOPT_0x1
000129 940e 0252 	CALL _strcpy
                 ; 0000 0064                 strcpy(output, "PASS CODE\nCHANGED.");
00012b 940e 025f 	CALL SUBOPT_0x0
                +
00012d e8a2     +LDI R26 , LOW ( _0x4 + ( 34 ) )
00012e e0b2     +LDI R27 , HIGH ( _0x4 + ( 34 ) )
                 	__POINTW2MN _0x4,34
00012f 940e 0252 	CALL _strcpy
                 ; 0000 0065                 mode = OPEN;
000131 e0e2      	LDI  R30,LOW(2)
000132 2e7e      	MOV  R7,R30
                 ; 0000 0066             } else {
000133 c013      	RJMP _0x16
                 _0x15:
                 ; 0000 0067                 if (strcmp(passcode, buffer) == 0) {
000134 940e 0264 	CALL SUBOPT_0x1
000136 940e 023e 	CALL _strcmp
000138 30e0      	CPI  R30,0
000139 f439      	BRNE _0x17
                 ; 0000 0068                     mode = OPEN;
00013a e0e2      	LDI  R30,LOW(2)
00013b 2e7e      	MOV  R7,R30
                 ; 0000 0069                     strcpy(output, "OPEN");
00013c 940e 025f 	CALL SUBOPT_0x0
                +
00013e e9a5     +LDI R26 , LOW ( _0x4 + ( 53 ) )
00013f e0b2     +LDI R27 , HIGH ( _0x4 + ( 53 ) )
                 	__POINTW2MN _0x4,53
000140 c004      	RJMP _0x4B
                 ; 0000 006A                 } else {
                 _0x17:
                 ; 0000 006B                     strcpy(output, "WRONG PASS CODE");
000141 940e 025f 	CALL SUBOPT_0x0
                +
000143 e9aa     +LDI R26 , LOW ( _0x4 + ( 58 ) )
000144 e0b2     +LDI R27 , HIGH ( _0x4 + ( 58 ) )
                 	__POINTW2MN _0x4,58
                 _0x4B:
000145 940e 0252 	CALL _strcpy
                 ; 0000 006C                 }
                 ; 0000 006D             }
                 _0x16:
                 ; 0000 006E             counter = 0;
000147 2444      	CLR  R4
                 ; 0000 006F         }
                 ; 0000 0070 
                 ; 0000 0071         if (key != 0) {
                 _0x14:
000148 2055      	TST  R5
000149 f031      	BREQ _0x19
                 ; 0000 0072             lcd_clear();
00014a 940e 01de 	CALL _lcd_clear
                 ; 0000 0073             lcd_puts(output);
00014c eaaa      	LDI  R26,LOW(_output)
00014d e0b2      	LDI  R27,HIGH(_output)
00014e 940e 01ff 	CALL _lcd_puts
                 ; 0000 0074         }
                 ; 0000 0075     }
                 _0x19:
000150 cf8b      	RJMP _0x5
                 ; 0000 0076 }
                 _0x1A:
000151 cfff      	RJMP _0x1A
                 ; .FEND
                 
                 	.DSEG
                 _0x4:
000260           	.BYTE 0x4A
                 ;
                 ;void keypad (void) {
                 ; 0000 0078 void keypad (void) {
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 0079     PORTB = 0xF0;
000152 efe0      	LDI  R30,LOW(240)
000153 bbe8      	OUT  0x18,R30
                 ; 0000 007A     delay_ms(2);
000154 940e 026b 	CALL SUBOPT_0x2
                 ; 0000 007B     key = 0;
000156 2455      	CLR  R5
                 ; 0000 007C 
                 ; 0000 007D     /* ------ ROW 1 ------ */
                 ; 0000 007E     PORTB.4 = 0;
000157 98c4      	CBI  0x18,4
                 ; 0000 007F     delay_ms(2);
000158 940e 026b 	CALL SUBOPT_0x2
                 ; 0000 0080     while (PINB.0 == 0) key = '*';
                 _0x1D:
00015a 99b0      	SBIC 0x16,0
00015b c003      	RJMP _0x1F
00015c e2ea      	LDI  R30,LOW(42)
00015d 2e5e      	MOV  R5,R30
00015e cffb      	RJMP _0x1D
                 _0x1F:
                 ; 0000 0081 while (PINB.1 == 0) key = '7';
                 _0x20:
00015f 99b1      	SBIC 0x16,1
000160 c003      	RJMP _0x22
000161 e3e7      	LDI  R30,LOW(55)
000162 2e5e      	MOV  R5,R30
000163 cffb      	RJMP _0x20
                 _0x22:
                 ; 0000 0082 while (PINB.2 == 0) key = '4';
                 _0x23:
000164 99b2      	SBIC 0x16,2
000165 c003      	RJMP _0x25
000166 e3e4      	LDI  R30,LOW(52)
000167 2e5e      	MOV  R5,R30
000168 cffb      	RJMP _0x23
                 _0x25:
                 ; 0000 0083 while (PINB.3 == 0) key = '1';
                 _0x26:
000169 99b3      	SBIC 0x16,3
00016a c003      	RJMP _0x28
00016b e3e1      	LDI  R30,LOW(49)
00016c 2e5e      	MOV  R5,R30
00016d cffb      	RJMP _0x26
                 _0x28:
                 ; 0000 0084 PORTB.4 = 1;
00016e 9ac4      	SBI  0x18,4
                 ; 0000 0085 
                 ; 0000 0086     /* ------ ROW 2 ------ */
                 ; 0000 0087     PORTB.5 = 0;
00016f 98c5      	CBI  0x18,5
                 ; 0000 0088     delay_ms(2);
000170 940e 026b 	CALL SUBOPT_0x2
                 ; 0000 0089     while (PINB.0 == 0) key = '0';
                 _0x2D:
000172 99b0      	SBIC 0x16,0
000173 c003      	RJMP _0x2F
000174 e3e0      	LDI  R30,LOW(48)
000175 2e5e      	MOV  R5,R30
000176 cffb      	RJMP _0x2D
                 _0x2F:
                 ; 0000 008A while (PINB.1 == 0) key = '8';
                 _0x30:
000177 99b1      	SBIC 0x16,1
000178 c003      	RJMP _0x32
000179 e3e8      	LDI  R30,LOW(56)
00017a 2e5e      	MOV  R5,R30
00017b cffb      	RJMP _0x30
                 _0x32:
                 ; 0000 008B while (PINB.2 == 0) key = '5';
                 _0x33:
00017c 99b2      	SBIC 0x16,2
00017d c003      	RJMP _0x35
00017e e3e5      	LDI  R30,LOW(53)
00017f 2e5e      	MOV  R5,R30
000180 cffb      	RJMP _0x33
                 _0x35:
                 ; 0000 008C while (PINB.3 == 0) key = '2';
                 _0x36:
000181 99b3      	SBIC 0x16,3
000182 c003      	RJMP _0x38
000183 e3e2      	LDI  R30,LOW(50)
000184 2e5e      	MOV  R5,R30
000185 cffb      	RJMP _0x36
                 _0x38:
                 ; 0000 008D PORTB.5 = 1;
000186 9ac5      	SBI  0x18,5
                 ; 0000 008E 
                 ; 0000 008F     /* ------ ROW 3 ------ */
                 ; 0000 0090     PORTB.6 = 0;
000187 98c6      	CBI  0x18,6
                 ; 0000 0091     delay_ms(2);
000188 940e 026b 	CALL SUBOPT_0x2
                 ; 0000 0092     while (PINB.0 == 0) key = '#';
                 _0x3D:
00018a 99b0      	SBIC 0x16,0
00018b c003      	RJMP _0x3F
00018c e2e3      	LDI  R30,LOW(35)
00018d 2e5e      	MOV  R5,R30
00018e cffb      	RJMP _0x3D
                 _0x3F:
                 ; 0000 0093 while (PINB.1 == 0) key = '9';
                 _0x40:
00018f 99b1      	SBIC 0x16,1
000190 c003      	RJMP _0x42
000191 e3e9      	LDI  R30,LOW(57)
000192 2e5e      	MOV  R5,R30
000193 cffb      	RJMP _0x40
                 _0x42:
                 ; 0000 0094 while (PINB.2 == 0) key = '6';
                 _0x43:
000194 99b2      	SBIC 0x16,2
000195 c003      	RJMP _0x45
000196 e3e6      	LDI  R30,LOW(54)
000197 2e5e      	MOV  R5,R30
000198 cffb      	RJMP _0x43
                 _0x45:
                 ; 0000 0095 while (PINB.3 == 0) key = '3';
                 _0x46:
000199 99b3      	SBIC 0x16,3
00019a c003      	RJMP _0x48
00019b e3e3      	LDI  R30,LOW(51)
00019c 2e5e      	MOV  R5,R30
00019d cffb      	RJMP _0x46
                 _0x48:
                 ; 0000 0096 PORTB.6 = 1;
00019e 9ac6      	SBI  0x18,6
                 ; 0000 0097 }
00019f 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0001a0 93aa      	ST   -Y,R26
0001a1 81e8      	LD   R30,Y
0001a2 71e0      	ANDI R30,LOW(0x10)
0001a3 f011      	BREQ _0x2020004
0001a4 9adb      	SBI  0x1B,3
0001a5 c001      	RJMP _0x2020005
                 _0x2020004:
0001a6 98db      	CBI  0x1B,3
                 _0x2020005:
0001a7 81e8      	LD   R30,Y
0001a8 72e0      	ANDI R30,LOW(0x20)
0001a9 f011      	BREQ _0x2020006
0001aa 9adc      	SBI  0x1B,4
0001ab c001      	RJMP _0x2020007
                 _0x2020006:
0001ac 98dc      	CBI  0x1B,4
                 _0x2020007:
0001ad 81e8      	LD   R30,Y
0001ae 74e0      	ANDI R30,LOW(0x40)
0001af f011      	BREQ _0x2020008
0001b0 9add      	SBI  0x1B,5
0001b1 c001      	RJMP _0x2020009
                 _0x2020008:
0001b2 98dd      	CBI  0x1B,5
                 _0x2020009:
0001b3 81e8      	LD   R30,Y
0001b4 78e0      	ANDI R30,LOW(0x80)
0001b5 f011      	BREQ _0x202000A
0001b6 9ade      	SBI  0x1B,6
0001b7 c001      	RJMP _0x202000B
                 _0x202000A:
0001b8 98de      	CBI  0x1B,6
                 _0x202000B:
                +
0001b9 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001ba 958a     +DEC R24
0001bb f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001bc 9ada      	SBI  0x1B,2
                +
0001bd e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001be 958a     +DEC R24
0001bf f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001c0 98da      	CBI  0x1B,2
                +
0001c1 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
0001c2 958a     +DEC R24
0001c3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
0001c4 c077      	RJMP _0x20C0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0001c5 93aa      	ST   -Y,R26
0001c6 81a8      	LD   R26,Y
0001c7 dfd8      	RCALL __lcd_write_nibble_G101
0001c8 81e8          ld    r30,y
0001c9 95e2          swap  r30
0001ca 83e8          st    y,r30
0001cb 81a8      	LD   R26,Y
0001cc dfd3      	RCALL __lcd_write_nibble_G101
                +
0001cd e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
0001ce 958a     +DEC R24
0001cf f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
0001d0 c06b      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
0001d1 93aa      	ST   -Y,R26
0001d2 81e8      	LD   R30,Y
0001d3 e0f0      	LDI  R31,0
0001d4 52ec      	SUBI R30,LOW(-__base_y_G101)
0001d5 4ffd      	SBCI R31,HIGH(-__base_y_G101)
0001d6 81e0      	LD   R30,Z
0001d7 81a9      	LDD  R26,Y+1
0001d8 0fae      	ADD  R26,R30
0001d9 dfeb      	RCALL __lcd_write_data
0001da 8069      	LDD  R6,Y+1
0001db 8098      	LDD  R9,Y+0
0001dc 9622      	ADIW R28,2
0001dd 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
0001de e0a2      	LDI  R26,LOW(2)
0001df 940e 026f 	CALL SUBOPT_0x3
0001e1 e0ac      	LDI  R26,LOW(12)
0001e2 dfe2      	RCALL __lcd_write_data
0001e3 e0a1      	LDI  R26,LOW(1)
0001e4 940e 026f 	CALL SUBOPT_0x3
0001e6 e0e0      	LDI  R30,LOW(0)
0001e7 2e9e      	MOV  R9,R30
0001e8 2e6e      	MOV  R6,R30
0001e9 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
0001ea 93aa      	ST   -Y,R26
0001eb 81a8      	LD   R26,Y
0001ec 30aa      	CPI  R26,LOW(0xA)
0001ed f011      	BREQ _0x2020011
0001ee 1468      	CP   R6,R8
0001ef f048      	BRLO _0x2020010
                 _0x2020011:
0001f0 e0e0      	LDI  R30,LOW(0)
0001f1 93ea      	ST   -Y,R30
0001f2 9493      	INC  R9
0001f3 2da9      	MOV  R26,R9
0001f4 dfdc      	RCALL _lcd_gotoxy
0001f5 81a8      	LD   R26,Y
0001f6 30aa      	CPI  R26,LOW(0xA)
0001f7 f409      	BRNE _0x2020013
0001f8 c043      	RJMP _0x20C0001
                 _0x2020013:
                 _0x2020010:
0001f9 9463      	INC  R6
0001fa 9ad8      	SBI  0x1B,0
0001fb 81a8      	LD   R26,Y
0001fc dfc8      	RCALL __lcd_write_data
0001fd 98d8      	CBI  0x1B,0
0001fe c03d      	RJMP _0x20C0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
0001ff 93ba      	ST   -Y,R27
000200 93aa      	ST   -Y,R26
000201 931a      	ST   -Y,R17
                 _0x2020014:
000202 81a9      	LDD  R26,Y+1
000203 81ba      	LDD  R27,Y+1+1
000204 91ed      	LD   R30,X+
000205 83a9      	STD  Y+1,R26
000206 83ba      	STD  Y+1+1,R27
000207 2f1e      	MOV  R17,R30
000208 30e0      	CPI  R30,0
000209 f019      	BREQ _0x2020016
00020a 2fa1      	MOV  R26,R17
00020b dfde      	RCALL _lcd_putchar
00020c cff5      	RJMP _0x2020014
                 _0x2020016:
00020d 8118      	LDD  R17,Y+0
00020e 9623      	ADIW R28,3
00020f 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000210 93aa      	ST   -Y,R26
000211 9ad3      	SBI  0x1A,3
000212 9ad4      	SBI  0x1A,4
000213 9ad5      	SBI  0x1A,5
000214 9ad6      	SBI  0x1A,6
000215 9ad2      	SBI  0x1A,2
000216 9ad0      	SBI  0x1A,0
000217 9ad1      	SBI  0x1A,1
000218 98da      	CBI  0x1B,2
000219 98d8      	CBI  0x1B,0
00021a 98d9      	CBI  0x1B,1
00021b 8088      	LDD  R8,Y+0
00021c 81e8      	LD   R30,Y
00021d 58e0      	SUBI R30,-LOW(128)
                +
00021e 93e0 02d6+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000220 81e8      	LD   R30,Y
000221 54e0      	SUBI R30,-LOW(192)
                +
000222 93e0 02d7+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000224 e1a4      	LDI  R26,LOW(20)
000225 e0b0      	LDI  R27,0
000226 940e 027c 	CALL _delay_ms
000228 940e 0275 	CALL SUBOPT_0x4
00022a 940e 0275 	CALL SUBOPT_0x4
00022c 940e 0275 	CALL SUBOPT_0x4
00022e e2a0      	LDI  R26,LOW(32)
00022f df70      	RCALL __lcd_write_nibble_G101
                +
000230 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000231 958a     +DEC R24
000232 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000233 e2a8      	LDI  R26,LOW(40)
000234 df90      	RCALL __lcd_write_data
000235 e0a4      	LDI  R26,LOW(4)
000236 df8e      	RCALL __lcd_write_data
000237 e8a5      	LDI  R26,LOW(133)
000238 df8c      	RCALL __lcd_write_data
000239 e0a6      	LDI  R26,LOW(6)
00023a df8a      	RCALL __lcd_write_data
00023b dfa2      	RCALL _lcd_clear
                 _0x20C0001:
00023c 9621      	ADIW R28,1
00023d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 _strcmp:
                 ; .FSTART _strcmp
00023e 93ba      	ST   -Y,R27
00023f 93aa      	ST   -Y,R26
000240 91e9          ld   r30,y+
000241 91f9          ld   r31,y+
000242 91a9          ld   r26,y+
000243 91b9          ld   r27,y+
                 strcmp0:
000244 916d          ld   r22,x+
000245 9171          ld   r23,z+
000246 1767          cp   r22,r23
000247 f421          brne strcmp1
000248 2366          tst  r22
000249 f7d1          brne strcmp0
                 strcmp3:
00024a 27ee          clr  r30
00024b 9508          ret
                 strcmp1:
00024c 1b67          sub  r22,r23
00024d f3e1          breq strcmp3
00024e e0e1          ldi  r30,1
00024f f408          brcc strcmp2
000250 50e2          subi r30,2
                 strcmp2:
000251 9508          ret
                 ; .FEND
                 _strcpy:
                 ; .FSTART _strcpy
000252 93ba      	ST   -Y,R27
000253 93aa      	ST   -Y,R26
000254 91e9          ld   r30,y+
000255 91f9          ld   r31,y+
000256 91a9          ld   r26,y+
000257 91b9          ld   r27,y+
000258 01cd          movw r24,r26
                 strcpy0:
000259 9161          ld   r22,z+
00025a 936d          st   x+,r22
00025b 2366          tst  r22
00025c f7e1          brne strcpy0
00025d 01fc          movw r30,r24
00025e 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _output:
0002aa           	.BYTE 0x20
                 _passcode:
0002ca           	.BYTE 0x5
                 _buffer:
0002cf           	.BYTE 0x5
                 __base_y_G101:
0002d4           	.BYTE 0x4
                 __seed_G102:
0002d8           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
00025f eaea      	LDI  R30,LOW(_output)
000260 e0f2      	LDI  R31,HIGH(_output)
000261 93fa      	ST   -Y,R31
000262 93ea      	ST   -Y,R30
000263 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000264 ecea      	LDI  R30,LOW(_passcode)
000265 e0f2      	LDI  R31,HIGH(_passcode)
000266 93fa      	ST   -Y,R31
000267 93ea      	ST   -Y,R30
000268 ecaf      	LDI  R26,LOW(_buffer)
000269 e0b2      	LDI  R27,HIGH(_buffer)
00026a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
00026b e0a2      	LDI  R26,LOW(2)
00026c e0b0      	LDI  R27,0
00026d 940c 027c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
00026f 940e 01c5 	CALL __lcd_write_data
000271 e0a3      	LDI  R26,LOW(3)
000272 e0b0      	LDI  R27,0
000273 940c 027c 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x4:
000275 e3a0      	LDI  R26,LOW(48)
000276 940e 01a0 	CALL __lcd_write_nibble_G101
                +
000278 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000279 958a     +DEC R24
00027a f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
00027b 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00027c 9610      	adiw r26,0
00027d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00027e ef8a     +LDI R24 , LOW ( 0xFA )
00027f e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000280 9701     +SBIW R24 , 1
000281 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000282 95a8      	wdr
000283 9711      	sbiw r26,1
000284 f7c9      	brne __delay_ms0
                 __delay_ms1:
000285 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32A register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   8 r5 :  20 r6 :   4 r7 :   8 
r8 :   2 r9 :   4 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   4 r18:   0 r19:   0 r20:   0 r21:   0 r22:   9 r23:   3 
r24:  23 r25:   3 r26:  53 r27:  21 r28:   4 r29:   1 r30: 149 r31:  15 
x  :   6 y  :  48 z  :  12 
Registers used: 22 out of 35 (62.9%)

ATmega32A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :   4 and   :   0 andi  :   4 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  13 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   1 
brlt  :   0 brmi  :   0 brne  :  23 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  32 
cbi   :  12 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   8 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  10 cpc   :   0 cpi   :   4 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   0 inc   :   3 jmp   :  24 ld    :  26 ldd   :   7 ldi   :  97 
lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :  23 movw  :   5 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   0 
ori   :   0 out   :  40 pop   :   0 push  :   0 rcall :  14 ret   :  12 
reti  :   0 rjmp  :  43 rol   :   0 ror   :   0 sbc   :   0 sbci  :   3 
sbi   :  16 sbic  :  13 sbis  :   0 sbiw  :   5 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  23 std   :   3 sts   :   3 sub   :   1 subi  :   6 swap  :   1 
tst   :   5 wdr   :   1 
Instructions used: 38 out of 116 (32.8%)

ATmega32A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00050c   1122    170   1292   32768   3.9%
[.dseg] 0x000060 0x0002dc      0    124    124    2048   6.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
